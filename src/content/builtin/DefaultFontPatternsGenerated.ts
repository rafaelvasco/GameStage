/**
 * Auto-generated optimized font patterns
 * Generated on: 2025-08-08T15:27:13.982Z
 * 
 * This file contains hexadecimal representations of 8x8 bitmap font patterns
 * for faster runtime performance. Each pattern is an array of 8 hex values
 * representing the 8 rows of the character bitmap.
 * 
 * DO NOT EDIT THIS FILE MANUALLY - it will be overwritten by the build script
 */

export const CHARACTER_PATTERNS_HEX: { [key: string]: number[] } = {
  " ": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // Space (32)
  "!": [0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00], // ! (33)
  '"': [0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00], // " (34)
  "#": [0x6C, 0xFE, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00], // # (35)
  "$": [0x18, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x18, 0x00], // $ (36)
  "%": [0xC6, 0xCC, 0x18, 0x30, 0x60, 0xCC, 0xC6, 0x00], // % (37)
  "&": [0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00], // & (38)
  "'": [0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00], // ' (39)
  "(": [0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00], // ( (40)
  ")": [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00], // ) (41)
  "*": [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00], // * (42)
  "+": [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00], // + (43)
  ",": [0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00], // , (44)
  "-": [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00], // - (45)
  ".": [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00], // . (46)
  "/": [0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00], // / (47)
  "0": [0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00], // 0 (48)
  "1": [0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00], // 1 (49)
  "2": [0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0xFE, 0x00], // 2 (50)
  "3": [0x7C, 0xC6, 0x06, 0x1C, 0x06, 0xC6, 0x7C, 0x00], // 3 (51)
  "4": [0x0C, 0x1C, 0x3C, 0x6C, 0xFE, 0x0C, 0x0C, 0x00], // 4 (52)
  "5": [0xFE, 0xC0, 0xFC, 0x06, 0x06, 0xC6, 0x7C, 0x00], // 5 (53)
  "6": [0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6, 0x7C, 0x00], // 6 (54)
  "7": [0xFE, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00], // 7 (55)
  "8": [0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00], // 8 (56)
  "9": [0x7C, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00], // 9 (57)
  ":": [0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00], // : (58)
  ";": [0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x30, 0x00], // ; (59)
  "<": [0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00], // < (60)
  "=": [0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00], // = (61)
  ">": [0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00], // > (62)
  "?": [0x7C, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00], // ? (63)
  "@": [0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00], // @ (64)
  "A": [0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00], // A (65)
  "B": [0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00], // B (66)
  "C": [0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00], // C (67)
  "D": [0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00], // D (68)
  "E": [0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00], // E (69)
  "F": [0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00], // F (70)
  "G": [0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00], // G (71)
  "H": [0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00], // H (72)
  "I": [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00], // I (73)
  "J": [0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00], // J (74)
  "K": [0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00], // K (75)
  "L": [0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00], // L (76)
  "M": [0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00], // M (77)
  "N": [0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00], // N (78)
  "O": [0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00], // O (79)
  "P": [0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00], // P (80)
  "Q": [0x7C, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C], // Q (81)
  "R": [0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00], // R (82)
  "S": [0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00], // S (83)
  "T": [0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x3C, 0x00], // T (84)
  "U": [0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00], // U (85)
  "V": [0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00], // V (86)
  "W": [0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00], // W (87)
  "X": [0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00], // X (88)
  "Y": [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00], // Y (89)
  "Z": [0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00], // Z (90)
  "[": [0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00], // [ (91)
  "\\": [0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00], // \\ (92)
  "]": [0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00], // ] (93)
  "^": [0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00], // ^ (94)
  "_": [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF], // _ (95)
  "`": [0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00], // ` (96)
  "a": [0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00], // a (97)
  "b": [0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00], // b (98)
  "c": [0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00], // c (99)
  "d": [0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00], // d (100)
  "e": [0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00], // e (101)
  "f": [0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00], // f (102)
  "g": [0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8], // g (103)
  "h": [0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00], // h (104)
  "i": [0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00], // i (105)
  "j": [0x06, 0x00, 0x0E, 0x06, 0x06, 0x66, 0x66, 0x3C], // j (106)
  "k": [0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00], // k (107)
  "l": [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00], // l (108)
  "m": [0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00], // m (109)
  "n": [0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00], // n (110)
  "o": [0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00], // o (111)
  "p": [0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0], // p (112)
  "q": [0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E], // q (113)
  "r": [0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00], // r (114)
  "s": [0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00], // s (115)
  "t": [0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00], // t (116)
  "u": [0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00], // u (117)
  "v": [0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00], // v (118)
  "w": [0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00], // w (119)
  "x": [0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00], // x (120)
  "y": [0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8], // y (121)
  "z": [0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00], // z (122)
  "{": [0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00], // { (123)
  "|": [0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00], // | (124)
  "}": [0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00], // } (125)
  "~": [0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // ~ (126)
};

/**
 * Convert character code to pattern array
 * Returns the hex pattern for the given character code, or undefined if not found
 */
export function getCharacterPattern(charCode: number): number[] | undefined {
  const char = String.fromCharCode(charCode);
  return CHARACTER_PATTERNS_HEX[char];
}

/**
 * Check if a character has a pattern defined
 */
export function hasCharacterPattern(charCode: number): boolean {
  const char = String.fromCharCode(charCode);
  return char in CHARACTER_PATTERNS_HEX;
}

/**
 * Get all supported character codes
 */
export function getSupportedCharCodes(): number[] {
  return Object.keys(CHARACTER_PATTERNS_HEX).map(char => char.charCodeAt(0)).sort((a, b) => a - b);
}
